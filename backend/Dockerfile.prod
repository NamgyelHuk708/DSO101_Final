# Production environment

FROM node:12-alpine

# Do not use 'COPY . .' to copy all files. Copying all files will force a build even if no client files have been modified

# Set app directory
WORKDIR /app

# Environment variables
ENV NODE_OPTIONS=--max_old_space_size=4096

# Install
COPY package.json ./
COPY sync-package-lock ./
# In production, we will use the package lock generated in the development process. No versions surprises.
RUN npm clean-install

# Build
COPY nodemon.json ./
COPY tsconfig.json ./
COPY src ./src

RUN npm run build

# Migrations
COPY database ./
# Run migrations. This is also responsible of copying node_modules and package-lock.json to host machine.
COPY docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

ENTRYPOINT [ "/docker-entrypoint.sh" ]

# CMD is not executed when command is defined in docker composedasdada
CMD [ "npm", "run", "serve" ]

# FROM node:18-alpine
# WORKDIR /app

# # Set production environment
# ENV NODE_ENV=production
# ENV NODE_OPTIONS=--max_old_space_size=4096

# # Install production dependencies only
# COPY package.json sync-package-lock ./
# RUN npm install --production && \
#     npm cache clean --force

# # Copy only necessary files
# COPY tsconfig.json ./
# COPY src ./src
# COPY database ./database
# COPY docker-entrypoint.sh /docker-entrypoint.sh
# RUN chmod +x /docker-entrypoint.sh

# # Build TypeScript (if needed)
# RUN if [ -f tsconfig.json ]; then npm run build; fi

# ENTRYPOINT ["/docker-entrypoint.sh"]
# CMD ["node", "dist/main.js"] 
#  # Adjust based on your entry file